import React, { Component } from 'react';
import { connect } from "react-redux";
import { withRouter } from 'react-router-dom';
import queryString from 'query-string';
import * as actions from '../../store/actions';
import HomeHeader from '../HomePage/HomeHeader';
import "./VerifyEmail.scss"

class VerifyEmail extends Component {
    constructor(props) {
        super(props);
        this.state = {
            status: 'loading', // 'loading' | 'success' | 'fail'
            message: ''
        };
    }

    componentDidMount() {
        // ∆Øu ti√™n query string: /verify-booking?token=...&doctorId=...&patientId=...
        let token, doctorId, patientId;

        if (this.props.location && this.props.location.search) {
            const parsed = queryString.parse(this.props.location.search);
            token = parsed.token;
            doctorId = parsed.doctorId;
            patientId = parsed.patientId;
        }

        // Fallback: path params: /verify-booking/:token/:doctorId/:patientId
        if ((!token || !doctorId || !patientId) && this.props.match && this.props.match.params) {
            const { token: pToken, doctorId: pDoctorId, patientId: pPatientId } = this.props.match.params;
            token = token || pToken;
            doctorId = doctorId || pDoctorId;
            patientId = patientId || pPatientId;
        }

        if (!token || !doctorId || !patientId) {
            this.setState({
                status: 'fail',
                message: 'Thi·∫øu tham s·ªë x√°c nh·∫≠n (token/doctorId/patientId).'
            });
            return;
        }

        // G·ªçi action verify
        this.props.postVerifyBookAppointment({ token, doctorId, patientId });
    }

    componentDidUpdate(prevProps) {
        if (prevProps.verifyBookAppointment !== this.props.verifyBookAppointment) {
            const resp = this.props.verifyBookAppointment;
            if (!resp) return;

            if (resp.errCode === 0) {
                // C√≥ th·ªÉ l√† ‚ÄúVerify booking success‚Äù ho·∫∑c ‚ÄúAppointment already verified‚Äù
                this.setState({
                    status: 'success',
                    message: resp.errMessage || 'X√°c nh·∫≠n l·ªãch h·∫πn th√†nh c√¥ng!'
                });
            } else {
                this.setState({
                    status: 'fail',
                    message: resp.errMessage || 'X√°c nh·∫≠n l·ªãch h·∫πn th·∫•t b·∫°i.'
                });
            }
        }
    }

    renderBody() {
        const { status, message } = this.state;

        if (status === 'loading') {
            return (
                <div className="verify-email__box">
                    <div className="verify-email__title">ƒêang x√°c nh·∫≠n l·ªãch h·∫πn‚Ä¶</div>
                    <div className="verify-email__desc">Vui l√≤ng ch·ªù trong gi√¢y l√°t.</div>
                </div>
            );
        }

        if (status === 'success') {
            return (
                <div className="verify-email__box verify-email__box--success">
                    <div className="verify-email__title">Th√†nh c√¥ng üéâ</div>
                    <div className="verify-email__desc">{message}</div>
                </div>
            );
        }

        return (
            <div className="verify-email__box verify-email__box--fail">
                <div className="verify-email__title">X√°c nh·∫≠n th·∫•t b·∫°i</div>
                <div className="verify-email__desc">{message || 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.'}</div>
            </div>
        );
    }

    render() {
        return (
            <>
                <HomeHeader />
                <div className="verify-email container">
                    {this.renderBody()}
                </div>
            </>
        );
    }
}

const mapStateToProps = state => ({
    language: state.app.language,
    verifyBookAppointment: state.admin.verifyBookAppointment, // c√≥ th·ªÉ l√† "success" ho·∫∑c object {errCode, errMessage}
});

const mapDispatchToProps = dispatch => ({
    postVerifyBookAppointment: (data) => dispatch(actions.postVerifyBookAppointment(data)),
});

export default connect(mapStateToProps, mapDispatchToProps)(withRouter(VerifyEmail));
